 double Line2D_ptLineDistSq(double x1, double y1,
          double x2, double y2,
          double px, double py)
    {
 // Adjust vectors relative to x1,y1
 // x2,y2 becomes relative vector from x1,y1 to end of segment
 x2 -= x1;
 y2 -= y1;
 // px,py becomes relative vector from x1,y1 to test point
 px -= x1;
 py -= y1;
 double dotprod = px * x2 + py * y2;
 // dotprod is the length of the px,py vector
 // projected on the x1,y1=>x2,y2 vector times the
 // length of the x1,y1=>x2,y2 vector
 double projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
 // Distance to line is now the length of the relative point
 // vector minus the length of its projection onto the line
 double lenSq = px * px + py * py - projlenSq;
 if (lenSq < 0) {
     lenSq = 0;
 }
 return lenSq;
    }
    /**
     * Returns the distance from a point to a line.
     * The distance measured is the distance between the specified
     * point and the closest point on the infinitely-extended line
     * defined by the specified coordinates.  If the specified point 
     * intersects the line, this method returns 0.0.
     *
     * @param x1 the X coordinate of the start point of the specified line
     * @param y1 the Y coordinate of the start point of the specified line
     * @param x2 the X coordinate of the end point of the specified line
     * @param y2 the Y coordinate of the end point of the specified line
     * @param px the X coordinate of the specified point being
     *           measured against the specified line
     * @param py the Y coordinate of the specified point being
     *           measured against the specified line
     * @return a double value that is the distance from the specified
     *    point to the specified line.
     * @see #ptSegDist(double, double, double, double, double, double)
     * @since 1.2
     */
 double Line2D_ptLineDist(double x1, double y1,
        double x2, double y2,
        double px, double py)
    {
 return square_root(Line2D_ptLineDistSq(x1, y1, x2, y2, px, py));
    }


    /**
     * Returns the square of the distance from a point to a line segment.
     * The distance measured is the distance between the specified
     * point and the closest point between the specified end points.  
     * If the specified point intersects the line segment in between the
     * end points, this method returns 0.0.     
     *
     * @param x1 the X coordinate of the start point of the
     *           specified line segment
     * @param y1 the Y coordinate of the start point of the
     *           specified line segment
     * @param x2 the X coordinate of the end point of the
     *           specified line segment
     * @param y2 the Y coordinate of the end point of the
     *           specified line segment
     * @param px the X coordinate of the specified point being
     *           measured against the specified line segment
     * @param py the Y coordinate of the specified point being
     *           measured against the specified line segment
     * @return a double value that is the square of the distance from the
     *   specified point to the specified line segment.
     * @see #ptLineDistSq(double, double, double, double, double, double)
     * @since 1.2
     */
 double Line2D_ptSegDistSq(double x1, double y1,
         double x2, double y2,
         double px, double py)
    {
 // Adjust vectors relative to x1,y1
 // x2,y2 becomes relative vector from x1,y1 to end of segment
 x2 -= x1;
 y2 -= y1;
 // px,py becomes relative vector from x1,y1 to test point
 px -= x1;
 py -= y1;
 double dotprod = px * x2 + py * y2;
 double projlenSq;
 if (dotprod <= 0.0) {
     // px,py is on the side of x1,y1 away from x2,y2
     // distance to segment is length of px,py vector
     // "length of its (clipped) projection" is now 0.0
     projlenSq = 0.0;
 } else {
     // switch to backwards vectors relative to x2,y2
     // x2,y2 are already the negative of x1,y1=>x2,y2
     // to get px,py to be the negative of px,py=>x2,y2
     // the dot product of two negated vectors is the same
     // as the dot product of the two normal vectors
     px = x2 - px;
     py = y2 - py;
     dotprod = px * x2 + py * y2;
     if (dotprod <= 0.0) {
  // px,py is on the side of x2,y2 away from x1,y1
  // distance to segment is length of (backwards) px,py vector
  // "length of its (clipped) projection" is now 0.0
  projlenSq = 0.0;
     } else {
  // px,py is between x1,y1 and x2,y2
  // dotprod is the length of the px,py vector
  // projected on the x2,y2=>x1,y1 vector times the
  // length of the x2,y2=>x1,y1 vector
  projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
     }
 }
 // Distance to line is now the length of the relative point
 // vector minus the length of its projection onto the line
 // (which is zero if the projection falls outside the range
 //  of the line segment).
 double lenSq = px * px + py * py - projlenSq;
 if (lenSq < 0) {
     lenSq = 0;
 }
 return lenSq;
    }
    /**
     * Returns the distance from a point to a line segment.
     * The distance measured is the distance between the specified
     * point and the closest point between the specified end points.  
     * If the specified point intersects the line segment in between the
     * end points, this method returns 0.0.
     *
     * @param x1 the X coordinate of the start point of the
     *           specified line segment
     * @param y1 the Y coordinate of the start point of the
     *           specified line segment
     * @param x2 the X coordinate of the end point of the
     *           specified line segment
     * @param y2 the Y coordinate of the end point of the
     *           specified line segment
     * @param px the X coordinate of the specified point being
     *           measured against the specified line segment
     * @param py the Y coordinate of the specified point being
     *           measured against the specified line segment
     * @return a double value that is the distance from the specified point
     *    to the specified line segment.
     * @see #ptLineDist(double, double, double, double, double, double)
     * @since 1.2
     */
 double Line2D_ptSegDist(double x1, double y1,
       double x2, double y2,
       double px, double py)
    {
 return square_root(Line2D_ptSegDistSq(x1, y1, x2, y2, px, py));
    }

double line_point_distance(vector a, vector b, vector p) {
return Line2D_ptLineDist(a.x, a.y, b.x, b.y, p.x, p.y);
}
double line_point_sq(vector a, vector b, vector p) {
	return Line2D_ptLineDistSq(a.x, a.y, b.x, b.y, p.x, p.y);
}


double seg_point_distance(vector a, vector b, vector p) {
return Line2D_ptSegDist(a.x, a.y, b.x, b.y, p.x, p.y);
}
double seg_point_sq(vector a, vector b, vector p) {
	return Line2D_ptSegDistSq(a.x, a.y, b.x, b.y, p.x, p.y);
}
