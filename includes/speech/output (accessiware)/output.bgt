/*
Copyright 2017 Accessiware

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
class output {
tts_voice voice;

output(string packfile) {
pack_file libs;
libs.open(packfile);
libs.extract_file("_lib_saapi32.dat", DIRECTORY_TEMP+"\\_lib_saapi32.dat");
screen_reader_set_library_path(SYSTEM_ACCESS, DIRECTORY_TEMP+"\\_lib_saapi32.dat");
libs.extract_file("_lib_nvdacontrollerclient32.dat", DIRECTORY_TEMP+"\\_lib_nvdacontrollerclient32.dat");
screen_reader_set_library_path(NVDA, DIRECTORY_TEMP+"\\_lib_nvdacontrollerclient32.dat");
libs.close();
}

~output() {
if(file_exists(DIRECTORY_TEMP+"\\_lib_saapi32.dat")) {
screen_reader_unload_library(SYSTEM_ACCESS);
file_delete(DIRECTORY_TEMP+"\\_lib_saapi32.dat");
}
if(file_exists(DIRECTORY_TEMP+"\\_lib_nvdacontrollerclient32.dat")) {
screen_reader_unload_library(NVDA);
file_delete(DIRECTORY_TEMP+"\\_lib_nvdacontrollerclient32.dat");
}
}

bool speak(string text, bool interrupt=false, bool wait=false, int reader=-1) {
if(reader<0) {
reader=get_available_screen_reader();
}
if(reader>0) {
if(interrupt) {
braille(text);
return screen_reader_speak_interrupt(reader, text);
}
else {
braille(text);
return screen_reader_speak(reader, text);
}
}
else {
if(interrupt&&wait) {
return voice.speak_interrupt_wait(text);
} else if(interrupt) {
return voice.speak_interrupt(text);
} else if(wait) {
return voice.speak_wait(text);
} else {
return voice.speak(text);
}
}
}

int get_available_screen_reader() {
for(int x=1;x<=4;x++) {
if(screen_reader_is_running(x)) {
return x;
}
}
return 0;
}

private bool braille(string text, int reader=-1) {
if(reader<0) {
reader=get_available_screen_reader();
}
if(reader>0) {
return screen_reader_braille(reader, text);
}
return false;
}


}
